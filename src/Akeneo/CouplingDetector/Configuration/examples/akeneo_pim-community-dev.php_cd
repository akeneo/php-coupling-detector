<?php

use \Akeneo\CouplingDetector\Configuration\DefaultFinder;
use \Akeneo\CouplingDetector\Configuration\Configuration;
use \Akeneo\CouplingDetector\Domain\Rule;
use \Akeneo\CouplingDetector\Domain\RuleInterface;
use \Akeneo\CouplingDetector\Domain\Exclusion;
use \Akeneo\CouplingDetector\Domain\ExclusionInterface;

$finder = new DefaultFinder();
$finder->notPath('Oro');

$rules = [
    new Rule(
        'Akeneo\Component',
        ['Pim', 'PimEnterprise', 'Bundle', 'Doctrine\ORM'],
        RuleInterface::TYPE_FORBIDDEN
    ),
    new Rule(
        'Akeneo\Bundle',
        ['Pim', 'PimEnterprise'],
        RuleInterface::TYPE_FORBIDDEN
    ),
    new Rule(
        'Pim\Component',
        ['PimEnterprise', 'Bundle', 'Doctrine\ORM'],
        RuleInterface::TYPE_FORBIDDEN
    ),
    new Rule(
        'PimEnterprise\Component',
        ['Bundle', 'Doctrine\ORM'],
        RuleInterface::TYPE_FORBIDDEN
    ),
    new Rule(
        'Pim\Bundle',
        ['PimEnterprise'],
        RuleInterface::TYPE_FORBIDDEN
    ),
    new Rule(
        'Pim\Bundle\CatalogBundle',
        [
            // bundles
            'AnalyticsBundle',
            'CommentBundle',
            'DataGridBundle',
            'ImportExportBundle',
            'LocalizationBundle',
            'PdfGeneratorBundle',
            'TranslationBundle',
            'VersioningBundle',
            'BaseConnectorBundle',
            'ConnectorBundle',
            'EnrichBundle',
            'InstallerBundle',
            'NavigationBundle',
            'ReferenceDataBundle',
            'UIBundle',
            'WebServiceBundle',
            'DashboardBundle',
            'FilterBundle',
            'JsFormValidationBundle',
            'NotificationBundle',
            'TransformBundle',
            'UserBundle',
            'BatchBundle',
            // components
            'Connector',
        ],
        RuleInterface::TYPE_FORBIDDEN
    ),
    new Rule(
        'Pim\Bundle\ConnectorBundle',
        [
            'AnalyticsBundle',
            'CommentBundle',
            'DataGridBundle',
            'ImportExportBundle',
            'LocalizationBundle',
            'PdfGeneratorBundle',
            'TranslationBundle',
            'VersioningBundle',
            'BaseConnectorBundle',
            'CatalogBundle',
            'EnrichBundle',
            'InstallerBundle',
            'NavigationBundle',
            'ReferenceDataBundle',
            'UIBundle',
            'WebServiceBundle',
            'DashboardBundle',
            'FilterBundle',
            'JsFormValidationBundle',
            'NotificationBundle',
            'TransformBundle',
            'UserBundle',
        ],
        RuleInterface::TYPE_FORBIDDEN
    ),
];

// LEGACY can be fixed by moving a class
// DEPRECATED can be fixed by removing the class when we start to work on last supported version
$exclusions = [
    new Exclusion(
        'Akeneo\Component\Classification\Repository',
        [
            'Doctrine\ORM\QueryBuilder'
        ],
        'Repository interfaces should never expose QueryBuilder as parameter',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\ConnectorBundle\Writer\File\ContextableCsvWriter',
        [
            'Pim\Bundle\BaseConnectorBundle\Writer\File\CsvWriter'
        ],
        'ConnectorBundle should never use classes from BaseConnectorBundle',
        ExclusionInterface::TYPE_DEPRECATED
    ),
    new Exclusion(
        'Pim\Component\Catalog',
        [
            // Repository interfaces of CatalogBundle should be extracted in the catalog component
            'Pim\Bundle\CatalogBundle\Repository\AttributeRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\ChannelRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\GroupTypeRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\LocaleRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\AttributeGroupRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\AttributeRequirementRepositoryInterface',
            // Builder interface should be extracted in the catalog component
            'Pim\Bundle\CatalogBundle\Builder\ProductBuilderInterface',
            // Extract at least an interface of these factories in the catalog component (ideally move implem too)
            'Pim\Bundle\CatalogBundle\Factory\FamilyFactory',
            'Pim\Bundle\CatalogBundle\Factory\AttributeRequirementFactory',
            'Pim\Bundle\CatalogBundle\Factory\MetricFactory',
            // What to do with this class?
            'Pim\Bundle\CatalogBundle\Validator\AttributeValidatorHelper',
            // Extract this exception in the component, it should be more accurate than InvalidArgumentException
            // as it looks only used in updaters
            'Pim\Bundle\CatalogBundle\Exception\InvalidArgumentException',
            // Avoid to use this manager, extract an interface from this or maybe use repository and depreciate it
            'Pim\Bundle\CatalogBundle\Manager\CurrencyManager',
            // What to do with this, cannot be extracted due to dependencies to symfony form
            'Pim\Bundle\CatalogBundle\AttributeType\AbstractAttributeType',
            'Pim\Bundle\CatalogBundle\AttributeType\AttributeTypes',
            // Deprecated in 1.5, should be dropped the deprecated methods support
            'Pim\Bundle\CatalogBundle\Updater\ProductUpdaterInterface',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        // TranslatableInterface should be moved in a Akeneo component
        'Akeneo\Component\Classification\Updater\CategoryUpdater',
        [
            'Pim\Bundle\TranslationBundle\Entity\TranslatableInterface',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        // Repository interfaces should never expose QueryBuilder as parameter
        'Akeneo\Component\Classification\Repository',
        [
            'Doctrine\ORM\QueryBuilder',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Component\Connector',
        [
            // Interfaces of BatchBundle should be extracted in an Akeneo component
            'Akeneo\Bundle\BatchBundle\Entity\StepExecution',
            'Akeneo\Bundle\BatchBundle\Entity\JobExecution',
            'Akeneo\Bundle\BatchBundle\Item\InvalidItemException',
            'Akeneo\Bundle\BatchBundle\Item\ItemProcessorInterface',
            'Akeneo\Bundle\BatchBundle\Item\ItemReaderInterface',
            'Akeneo\Bundle\BatchBundle\Item\UploadedFileAwareInterface',
            'Akeneo\Bundle\BatchBundle\Item\AbstractConfigurableStepElement',
            'Akeneo\Bundle\BatchBundle\Item\ItemWriterInterface',
            'Akeneo\Bundle\BatchBundle\Job\RuntimeErrorException',
            'Akeneo\Bundle\BatchBundle\Step\AbstractStep',
            'Akeneo\Bundle\BatchBundle\Step\StepExecutionAwareInterface',
            // Repositories interfaces of CatalogBundle should be extracted in the catalog component
            'Pim\Bundle\CatalogBundle\Repository\AttributeRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\LocaleRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\CurrencyRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\GroupTypeRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\AssociationTypeRepositoryInterface',
            'Pim\Bundle\CatalogBundle\Repository\ChannelRepositoryInterface',
            // What to do with this, cannot be extracted due to dependencies to symfony form
            'Pim\Bundle\CatalogBundle\AttributeType\AttributeTypes',
            'Pim\Bundle\CatalogBundle\AttributeType\AbstractAttributeType',
            // We need to check why we use these classes, interfaces should be extracted in the catalog component
            'Pim\Bundle\CatalogBundle\Manager\AttributeValuesResolver',
            'Pim\Bundle\CatalogBundle\Manager\ProductTemplateApplierInterface',
            'Pim\Bundle\CatalogBundle\Validator\Constraints\File',
            // For factories and builders of CatalogBundle, interfaces should be created in the catalog component
            'Pim\Bundle\CatalogBundle\Builder\ProductBuilderInterface',
            'Pim\Bundle\CatalogBundle\Factory\AttributeFactory',
            'Pim\Bundle\CatalogBundle\Factory\AssociationTypeFactory',
            'Pim\Bundle\CatalogBundle\Factory\FamilyFactory',
            'Pim\Bundle\CatalogBundle\Factory\GroupFactory',
            // Version manager should be exploded with SRP and introduce different interfaces in a component
            'Pim\Bundle\VersioningBundle\Manager\VersionManager',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        // Connector component should not rely on base connector file writer, move the implementation in BC manner
        'Pim\Component\Connector\Writer\File\YamlWriter',
        [
            'Pim\Bundle\BaseConnectorBundle\Writer\File\FileWriter',
            'Akeneo\Bundle\BatchBundle\Job\RuntimeErrorException'
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        // Same issues than catalog component updater classes, same fixes expected
        'Pim\Component\ReferenceData\Updater',
        [
            'Pim\Bundle\CatalogBundle\Builder\ProductBuilderInterface',
            'Pim\Bundle\CatalogBundle\Validator\AttributeValidatorHelper',
            'Pim\Bundle\CatalogBundle\Exception\InvalidArgumentException',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        // Same issues than catalog component updater classes, same fixes expected
        'Pim\Component\Localization',
        [
            'Pim\Bundle\CatalogBundle\Model\MetricInterface',
            'Pim\Bundle\CatalogBundle\Model\ProductPriceInterface',
            'Pim\Bundle\CatalogBundle\Model\ProductValueInterface',
            'Pim\Bundle\CatalogBundle\AttributeType\AttributeTypes',
            'Pim\Bundle\CatalogBundle\Repository\AttributeRepositoryInterface',
            // Why we use it?
            'Pim\Component\Localization\Normalizer\MetricNormalizer',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\Model',
        [
            // should be extracted in a component in a akeneo component in a BC way (localization?)
            'Pim\Bundle\TranslationBundle\Entity\TranslatableInterface',
            'Pim\Bundle\TranslationBundle\Entity\AbstractTranslation',
            // should be extracted in a akeneo component in a BC way
            'Pim\Bundle\VersioningBundle\Model\VersionableInterface',
            // should be extracted in a akeneo component in a BC way
            'Pim\Bundle\CommentBundle\Model\CommentSubjectInterface',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\Entity',
        [
            // should be extracted in a component in a akeneo component in a BC way (localization?)
            'Pim\Bundle\TranslationBundle\Entity\TranslatableInterface',
            'Pim\Bundle\TranslationBundle\Entity\AbstractTranslation',
            // should be extracted in a akeneo component in a BC way
            'Pim\Bundle\VersioningBundle\Model\VersionableInterface',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\EventSubscriber',
        [
            // should be extracted in a akeneo component in a BC way
            'Pim\Bundle\VersioningBundle\Model\VersionableInterface',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\Doctrine\Common\Saver\GroupSaver',
        [
            // what to do with this, it's a weird way to share and update versionning context, could be re-worked
            // with the versioning reworking (no more relying on doctrine events)
            'Pim\Bundle\VersioningBundle\Manager\VersionContext',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\Manager\FamilyManager',
        [
            // FamilyManager should be dropped and not even used
            'Pim\Bundle\UserBundle\Context\UserContext',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\Helper\LocaleHelper',
        [
            // LocaleHelper should be simplified and moved to LocalizationBundle
            'Pim\Bundle\UserBundle\Context\UserContext',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        'Pim\Bundle\CatalogBundle\Repository',
        [
            // CatalogBundle repository interfaces should not rely on an EnrichBundle DataTransformer interface,
            // this enrich interface is not even related to UI and should be moved
            'Pim\Bundle\EnrichBundle\Form\DataTransformer\ChoicesProviderInterface',
            // CatalogBundle repository interfaces should not rely on a UIBundle repository interface, this ui
            // interface should be moved
            'Pim\Bundle\UIBundle\Entity\Repository\OptionRepositoryInterface',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
    new Exclusion(
        // CatalogBundle MongoDB normalizers should not use a TransformBundle normalizer, will be better to
        // duplicate code or extract
        'Pim\Bundle\CatalogBundle\MongoDB\Normalizer',
        [
            'Pim\Bundle\TransformBundle\Normalizer\Structured\TranslationNormalizer',
        ],
        'Excluding legacy issues',
        ExclusionInterface::TYPE_LEGACY
    ),
];

$legacyExclusions = [
];

$config = new Configuration($finder, $rules, $exclusions);

return $config;
